// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "WebSocketProto.pb.h"

@implementation WebSocketProtoRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [WebSocketProtoRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = [registry retain];
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface WebSocketMessage ()
@property (retain) Ping* ping;
@property (retain) AuthenticateRequest* authenticateRequest;
@property (retain) AuthenticateResponse* authenticateResponse;
@property (retain) BindRequest* bindRequest;
@property (retain) BindResponse* bindResponse;
@property (retain) Roster* roster;
@property (retain) Presence* presence;
@property (retain) TextMessage* textMessage;
@end

@implementation WebSocketMessage

- (BOOL) hasPing {
  return !!hasPing_;
}
- (void) setHasPing:(BOOL) value {
  hasPing_ = !!value;
}
@synthesize ping;
- (BOOL) hasAuthenticateRequest {
  return !!hasAuthenticateRequest_;
}
- (void) setHasAuthenticateRequest:(BOOL) value {
  hasAuthenticateRequest_ = !!value;
}
@synthesize authenticateRequest;
- (BOOL) hasAuthenticateResponse {
  return !!hasAuthenticateResponse_;
}
- (void) setHasAuthenticateResponse:(BOOL) value {
  hasAuthenticateResponse_ = !!value;
}
@synthesize authenticateResponse;
- (BOOL) hasBindRequest {
  return !!hasBindRequest_;
}
- (void) setHasBindRequest:(BOOL) value {
  hasBindRequest_ = !!value;
}
@synthesize bindRequest;
- (BOOL) hasBindResponse {
  return !!hasBindResponse_;
}
- (void) setHasBindResponse:(BOOL) value {
  hasBindResponse_ = !!value;
}
@synthesize bindResponse;
- (BOOL) hasRoster {
  return !!hasRoster_;
}
- (void) setHasRoster:(BOOL) value {
  hasRoster_ = !!value;
}
@synthesize roster;
- (BOOL) hasPresence {
  return !!hasPresence_;
}
- (void) setHasPresence:(BOOL) value {
  hasPresence_ = !!value;
}
@synthesize presence;
- (BOOL) hasTextMessage {
  return !!hasTextMessage_;
}
- (void) setHasTextMessage:(BOOL) value {
  hasTextMessage_ = !!value;
}
@synthesize textMessage;
- (void) dealloc {
  self.ping = nil;
  self.authenticateRequest = nil;
  self.authenticateResponse = nil;
  self.bindRequest = nil;
  self.bindResponse = nil;
  self.roster = nil;
  self.presence = nil;
  self.textMessage = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.ping = [Ping defaultInstance];
    self.authenticateRequest = [AuthenticateRequest defaultInstance];
    self.authenticateResponse = [AuthenticateResponse defaultInstance];
    self.bindRequest = [BindRequest defaultInstance];
    self.bindResponse = [BindResponse defaultInstance];
    self.roster = [Roster defaultInstance];
    self.presence = [Presence defaultInstance];
    self.textMessage = [TextMessage defaultInstance];
  }
  return self;
}
static WebSocketMessage* defaultWebSocketMessageInstance = nil;
+ (void) initialize {
  if (self == [WebSocketMessage class]) {
    defaultWebSocketMessageInstance = [[WebSocketMessage alloc] init];
  }
}
+ (WebSocketMessage*) defaultInstance {
  return defaultWebSocketMessageInstance;
}
- (WebSocketMessage*) defaultInstance {
  return defaultWebSocketMessageInstance;
}
- (BOOL) isInitialized {
  if (self.hasAuthenticateRequest) {
    if (!self.authenticateRequest.isInitialized) {
      return NO;
    }
  }
  if (self.hasAuthenticateResponse) {
    if (!self.authenticateResponse.isInitialized) {
      return NO;
    }
  }
  if (self.hasBindRequest) {
    if (!self.bindRequest.isInitialized) {
      return NO;
    }
  }
  if (self.hasRoster) {
    if (!self.roster.isInitialized) {
      return NO;
    }
  }
  if (self.hasPresence) {
    if (!self.presence.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasPing) {
    [output writeMessage:1 value:self.ping];
  }
  if (self.hasAuthenticateRequest) {
    [output writeMessage:2 value:self.authenticateRequest];
  }
  if (self.hasAuthenticateResponse) {
    [output writeMessage:3 value:self.authenticateResponse];
  }
  if (self.hasBindRequest) {
    [output writeMessage:4 value:self.bindRequest];
  }
  if (self.hasBindResponse) {
    [output writeMessage:5 value:self.bindResponse];
  }
  if (self.hasRoster) {
    [output writeMessage:6 value:self.roster];
  }
  if (self.hasPresence) {
    [output writeMessage:7 value:self.presence];
  }
  if (self.hasTextMessage) {
    [output writeMessage:8 value:self.textMessage];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasPing) {
    size += computeMessageSize(1, self.ping);
  }
  if (self.hasAuthenticateRequest) {
    size += computeMessageSize(2, self.authenticateRequest);
  }
  if (self.hasAuthenticateResponse) {
    size += computeMessageSize(3, self.authenticateResponse);
  }
  if (self.hasBindRequest) {
    size += computeMessageSize(4, self.bindRequest);
  }
  if (self.hasBindResponse) {
    size += computeMessageSize(5, self.bindResponse);
  }
  if (self.hasRoster) {
    size += computeMessageSize(6, self.roster);
  }
  if (self.hasPresence) {
    size += computeMessageSize(7, self.presence);
  }
  if (self.hasTextMessage) {
    size += computeMessageSize(8, self.textMessage);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (WebSocketMessage*) parseFromData:(NSData*) data {
  return (WebSocketMessage*)[[[WebSocketMessage builder] mergeFromData:data] build];
}
+ (WebSocketMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WebSocketMessage*)[[[WebSocketMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (WebSocketMessage*) parseFromInputStream:(NSInputStream*) input {
  return (WebSocketMessage*)[[[WebSocketMessage builder] mergeFromInputStream:input] build];
}
+ (WebSocketMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WebSocketMessage*)[[[WebSocketMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (WebSocketMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (WebSocketMessage*)[[[WebSocketMessage builder] mergeFromCodedInputStream:input] build];
}
+ (WebSocketMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (WebSocketMessage*)[[[WebSocketMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (WebSocketMessage_Builder*) builder {
  return [[[WebSocketMessage_Builder alloc] init] autorelease];
}
+ (WebSocketMessage_Builder*) builderWithPrototype:(WebSocketMessage*) prototype {
  return [[WebSocketMessage builder] mergeFrom:prototype];
}
- (WebSocketMessage_Builder*) builder {
  return [WebSocketMessage builder];
}
@end

@interface WebSocketMessage_Builder()
@property (retain) WebSocketMessage* result;
@end

@implementation WebSocketMessage_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[WebSocketMessage alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (WebSocketMessage_Builder*) clear {
  self.result = [[[WebSocketMessage alloc] init] autorelease];
  return self;
}
- (WebSocketMessage_Builder*) clone {
  return [WebSocketMessage builderWithPrototype:result];
}
- (WebSocketMessage*) defaultInstance {
  return [WebSocketMessage defaultInstance];
}
- (WebSocketMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (WebSocketMessage*) buildPartial {
  WebSocketMessage* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (WebSocketMessage_Builder*) mergeFrom:(WebSocketMessage*) other {
  if (other == [WebSocketMessage defaultInstance]) {
    return self;
  }
  if (other.hasPing) {
    [self mergePing:other.ping];
  }
  if (other.hasAuthenticateRequest) {
    [self mergeAuthenticateRequest:other.authenticateRequest];
  }
  if (other.hasAuthenticateResponse) {
    [self mergeAuthenticateResponse:other.authenticateResponse];
  }
  if (other.hasBindRequest) {
    [self mergeBindRequest:other.bindRequest];
  }
  if (other.hasBindResponse) {
    [self mergeBindResponse:other.bindResponse];
  }
  if (other.hasRoster) {
    [self mergeRoster:other.roster];
  }
  if (other.hasPresence) {
    [self mergePresence:other.presence];
  }
  if (other.hasTextMessage) {
    [self mergeTextMessage:other.textMessage];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (WebSocketMessage_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (WebSocketMessage_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        Ping_Builder* subBuilder = [Ping builder];
        if (self.hasPing) {
          [subBuilder mergeFrom:self.ping];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPing:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        AuthenticateRequest_Builder* subBuilder = [AuthenticateRequest builder];
        if (self.hasAuthenticateRequest) {
          [subBuilder mergeFrom:self.authenticateRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAuthenticateRequest:[subBuilder buildPartial]];
        break;
      }
      case 26: {
        AuthenticateResponse_Builder* subBuilder = [AuthenticateResponse builder];
        if (self.hasAuthenticateResponse) {
          [subBuilder mergeFrom:self.authenticateResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setAuthenticateResponse:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        BindRequest_Builder* subBuilder = [BindRequest builder];
        if (self.hasBindRequest) {
          [subBuilder mergeFrom:self.bindRequest];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBindRequest:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        BindResponse_Builder* subBuilder = [BindResponse builder];
        if (self.hasBindResponse) {
          [subBuilder mergeFrom:self.bindResponse];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setBindResponse:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        Roster_Builder* subBuilder = [Roster builder];
        if (self.hasRoster) {
          [subBuilder mergeFrom:self.roster];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setRoster:[subBuilder buildPartial]];
        break;
      }
      case 58: {
        Presence_Builder* subBuilder = [Presence builder];
        if (self.hasPresence) {
          [subBuilder mergeFrom:self.presence];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setPresence:[subBuilder buildPartial]];
        break;
      }
      case 66: {
        TextMessage_Builder* subBuilder = [TextMessage builder];
        if (self.hasTextMessage) {
          [subBuilder mergeFrom:self.textMessage];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setTextMessage:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasPing {
  return result.hasPing;
}
- (Ping*) ping {
  return result.ping;
}
- (WebSocketMessage_Builder*) setPing:(Ping*) value {
  result.hasPing = YES;
  result.ping = value;
  return self;
}
- (WebSocketMessage_Builder*) setPingBuilder:(Ping_Builder*) builderForValue {
  return [self setPing:[builderForValue build]];
}
- (WebSocketMessage_Builder*) mergePing:(Ping*) value {
  if (result.hasPing &&
      result.ping != [Ping defaultInstance]) {
    result.ping =
      [[[Ping builderWithPrototype:result.ping] mergeFrom:value] buildPartial];
  } else {
    result.ping = value;
  }
  result.hasPing = YES;
  return self;
}
- (WebSocketMessage_Builder*) clearPing {
  result.hasPing = NO;
  result.ping = [Ping defaultInstance];
  return self;
}
- (BOOL) hasAuthenticateRequest {
  return result.hasAuthenticateRequest;
}
- (AuthenticateRequest*) authenticateRequest {
  return result.authenticateRequest;
}
- (WebSocketMessage_Builder*) setAuthenticateRequest:(AuthenticateRequest*) value {
  result.hasAuthenticateRequest = YES;
  result.authenticateRequest = value;
  return self;
}
- (WebSocketMessage_Builder*) setAuthenticateRequestBuilder:(AuthenticateRequest_Builder*) builderForValue {
  return [self setAuthenticateRequest:[builderForValue build]];
}
- (WebSocketMessage_Builder*) mergeAuthenticateRequest:(AuthenticateRequest*) value {
  if (result.hasAuthenticateRequest &&
      result.authenticateRequest != [AuthenticateRequest defaultInstance]) {
    result.authenticateRequest =
      [[[AuthenticateRequest builderWithPrototype:result.authenticateRequest] mergeFrom:value] buildPartial];
  } else {
    result.authenticateRequest = value;
  }
  result.hasAuthenticateRequest = YES;
  return self;
}
- (WebSocketMessage_Builder*) clearAuthenticateRequest {
  result.hasAuthenticateRequest = NO;
  result.authenticateRequest = [AuthenticateRequest defaultInstance];
  return self;
}
- (BOOL) hasAuthenticateResponse {
  return result.hasAuthenticateResponse;
}
- (AuthenticateResponse*) authenticateResponse {
  return result.authenticateResponse;
}
- (WebSocketMessage_Builder*) setAuthenticateResponse:(AuthenticateResponse*) value {
  result.hasAuthenticateResponse = YES;
  result.authenticateResponse = value;
  return self;
}
- (WebSocketMessage_Builder*) setAuthenticateResponseBuilder:(AuthenticateResponse_Builder*) builderForValue {
  return [self setAuthenticateResponse:[builderForValue build]];
}
- (WebSocketMessage_Builder*) mergeAuthenticateResponse:(AuthenticateResponse*) value {
  if (result.hasAuthenticateResponse &&
      result.authenticateResponse != [AuthenticateResponse defaultInstance]) {
    result.authenticateResponse =
      [[[AuthenticateResponse builderWithPrototype:result.authenticateResponse] mergeFrom:value] buildPartial];
  } else {
    result.authenticateResponse = value;
  }
  result.hasAuthenticateResponse = YES;
  return self;
}
- (WebSocketMessage_Builder*) clearAuthenticateResponse {
  result.hasAuthenticateResponse = NO;
  result.authenticateResponse = [AuthenticateResponse defaultInstance];
  return self;
}
- (BOOL) hasBindRequest {
  return result.hasBindRequest;
}
- (BindRequest*) bindRequest {
  return result.bindRequest;
}
- (WebSocketMessage_Builder*) setBindRequest:(BindRequest*) value {
  result.hasBindRequest = YES;
  result.bindRequest = value;
  return self;
}
- (WebSocketMessage_Builder*) setBindRequestBuilder:(BindRequest_Builder*) builderForValue {
  return [self setBindRequest:[builderForValue build]];
}
- (WebSocketMessage_Builder*) mergeBindRequest:(BindRequest*) value {
  if (result.hasBindRequest &&
      result.bindRequest != [BindRequest defaultInstance]) {
    result.bindRequest =
      [[[BindRequest builderWithPrototype:result.bindRequest] mergeFrom:value] buildPartial];
  } else {
    result.bindRequest = value;
  }
  result.hasBindRequest = YES;
  return self;
}
- (WebSocketMessage_Builder*) clearBindRequest {
  result.hasBindRequest = NO;
  result.bindRequest = [BindRequest defaultInstance];
  return self;
}
- (BOOL) hasBindResponse {
  return result.hasBindResponse;
}
- (BindResponse*) bindResponse {
  return result.bindResponse;
}
- (WebSocketMessage_Builder*) setBindResponse:(BindResponse*) value {
  result.hasBindResponse = YES;
  result.bindResponse = value;
  return self;
}
- (WebSocketMessage_Builder*) setBindResponseBuilder:(BindResponse_Builder*) builderForValue {
  return [self setBindResponse:[builderForValue build]];
}
- (WebSocketMessage_Builder*) mergeBindResponse:(BindResponse*) value {
  if (result.hasBindResponse &&
      result.bindResponse != [BindResponse defaultInstance]) {
    result.bindResponse =
      [[[BindResponse builderWithPrototype:result.bindResponse] mergeFrom:value] buildPartial];
  } else {
    result.bindResponse = value;
  }
  result.hasBindResponse = YES;
  return self;
}
- (WebSocketMessage_Builder*) clearBindResponse {
  result.hasBindResponse = NO;
  result.bindResponse = [BindResponse defaultInstance];
  return self;
}
- (BOOL) hasRoster {
  return result.hasRoster;
}
- (Roster*) roster {
  return result.roster;
}
- (WebSocketMessage_Builder*) setRoster:(Roster*) value {
  result.hasRoster = YES;
  result.roster = value;
  return self;
}
- (WebSocketMessage_Builder*) setRosterBuilder:(Roster_Builder*) builderForValue {
  return [self setRoster:[builderForValue build]];
}
- (WebSocketMessage_Builder*) mergeRoster:(Roster*) value {
  if (result.hasRoster &&
      result.roster != [Roster defaultInstance]) {
    result.roster =
      [[[Roster builderWithPrototype:result.roster] mergeFrom:value] buildPartial];
  } else {
    result.roster = value;
  }
  result.hasRoster = YES;
  return self;
}
- (WebSocketMessage_Builder*) clearRoster {
  result.hasRoster = NO;
  result.roster = [Roster defaultInstance];
  return self;
}
- (BOOL) hasPresence {
  return result.hasPresence;
}
- (Presence*) presence {
  return result.presence;
}
- (WebSocketMessage_Builder*) setPresence:(Presence*) value {
  result.hasPresence = YES;
  result.presence = value;
  return self;
}
- (WebSocketMessage_Builder*) setPresenceBuilder:(Presence_Builder*) builderForValue {
  return [self setPresence:[builderForValue build]];
}
- (WebSocketMessage_Builder*) mergePresence:(Presence*) value {
  if (result.hasPresence &&
      result.presence != [Presence defaultInstance]) {
    result.presence =
      [[[Presence builderWithPrototype:result.presence] mergeFrom:value] buildPartial];
  } else {
    result.presence = value;
  }
  result.hasPresence = YES;
  return self;
}
- (WebSocketMessage_Builder*) clearPresence {
  result.hasPresence = NO;
  result.presence = [Presence defaultInstance];
  return self;
}
- (BOOL) hasTextMessage {
  return result.hasTextMessage;
}
- (TextMessage*) textMessage {
  return result.textMessage;
}
- (WebSocketMessage_Builder*) setTextMessage:(TextMessage*) value {
  result.hasTextMessage = YES;
  result.textMessage = value;
  return self;
}
- (WebSocketMessage_Builder*) setTextMessageBuilder:(TextMessage_Builder*) builderForValue {
  return [self setTextMessage:[builderForValue build]];
}
- (WebSocketMessage_Builder*) mergeTextMessage:(TextMessage*) value {
  if (result.hasTextMessage &&
      result.textMessage != [TextMessage defaultInstance]) {
    result.textMessage =
      [[[TextMessage builderWithPrototype:result.textMessage] mergeFrom:value] buildPartial];
  } else {
    result.textMessage = value;
  }
  result.hasTextMessage = YES;
  return self;
}
- (WebSocketMessage_Builder*) clearTextMessage {
  result.hasTextMessage = NO;
  result.textMessage = [TextMessage defaultInstance];
  return self;
}
@end

@interface Error ()
@property int32_t code;
@property (retain) NSString* description;
@end

@implementation Error

- (BOOL) hasCode {
  return !!hasCode_;
}
- (void) setHasCode:(BOOL) value {
  hasCode_ = !!value;
}
@synthesize code;
- (BOOL) hasDescription {
  return !!hasDescription_;
}
- (void) setHasDescription:(BOOL) value {
  hasDescription_ = !!value;
}
@synthesize description;
- (void) dealloc {
  self.description = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.code = 0;
    self.description = @"";
  }
  return self;
}
static Error* defaultErrorInstance = nil;
+ (void) initialize {
  if (self == [Error class]) {
    defaultErrorInstance = [[Error alloc] init];
  }
}
+ (Error*) defaultInstance {
  return defaultErrorInstance;
}
- (Error*) defaultInstance {
  return defaultErrorInstance;
}
- (BOOL) isInitialized {
  if (!self.hasCode) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCode) {
    [output writeUInt32:1 value:self.code];
  }
  if (self.hasDescription) {
    [output writeString:2 value:self.description];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasCode) {
    size += computeUInt32Size(1, self.code);
  }
  if (self.hasDescription) {
    size += computeStringSize(2, self.description);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Error*) parseFromData:(NSData*) data {
  return (Error*)[[[Error builder] mergeFromData:data] build];
}
+ (Error*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Error*)[[[Error builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Error*) parseFromInputStream:(NSInputStream*) input {
  return (Error*)[[[Error builder] mergeFromInputStream:input] build];
}
+ (Error*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Error*)[[[Error builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Error*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Error*)[[[Error builder] mergeFromCodedInputStream:input] build];
}
+ (Error*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Error*)[[[Error builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Error_Builder*) builder {
  return [[[Error_Builder alloc] init] autorelease];
}
+ (Error_Builder*) builderWithPrototype:(Error*) prototype {
  return [[Error builder] mergeFrom:prototype];
}
- (Error_Builder*) builder {
  return [Error builder];
}
@end

@interface Error_Builder()
@property (retain) Error* result;
@end

@implementation Error_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Error alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Error_Builder*) clear {
  self.result = [[[Error alloc] init] autorelease];
  return self;
}
- (Error_Builder*) clone {
  return [Error builderWithPrototype:result];
}
- (Error*) defaultInstance {
  return [Error defaultInstance];
}
- (Error*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Error*) buildPartial {
  Error* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Error_Builder*) mergeFrom:(Error*) other {
  if (other == [Error defaultInstance]) {
    return self;
  }
  if (other.hasCode) {
    [self setCode:other.code];
  }
  if (other.hasDescription) {
    [self setDescription:other.description];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Error_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Error_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setCode:[input readUInt32]];
        break;
      }
      case 18: {
        [self setDescription:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasCode {
  return result.hasCode;
}
- (int32_t) code {
  return result.code;
}
- (Error_Builder*) setCode:(int32_t) value {
  result.hasCode = YES;
  result.code = value;
  return self;
}
- (Error_Builder*) clearCode {
  result.hasCode = NO;
  result.code = 0;
  return self;
}
- (BOOL) hasDescription {
  return result.hasDescription;
}
- (NSString*) description {
  return result.description;
}
- (Error_Builder*) setDescription:(NSString*) value {
  result.hasDescription = YES;
  result.description = value;
  return self;
}
- (Error_Builder*) clearDescription {
  result.hasDescription = NO;
  result.description = @"";
  return self;
}
@end

@interface Ping ()
@property (retain) NSString* id;
@end

@implementation Ping

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
- (void) dealloc {
  self.id = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = @"";
  }
  return self;
}
static Ping* defaultPingInstance = nil;
+ (void) initialize {
  if (self == [Ping class]) {
    defaultPingInstance = [[Ping alloc] init];
  }
}
+ (Ping*) defaultInstance {
  return defaultPingInstance;
}
- (Ping*) defaultInstance {
  return defaultPingInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeString:1 value:self.id];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasId) {
    size += computeStringSize(1, self.id);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Ping*) parseFromData:(NSData*) data {
  return (Ping*)[[[Ping builder] mergeFromData:data] build];
}
+ (Ping*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Ping*)[[[Ping builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Ping*) parseFromInputStream:(NSInputStream*) input {
  return (Ping*)[[[Ping builder] mergeFromInputStream:input] build];
}
+ (Ping*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Ping*)[[[Ping builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Ping*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Ping*)[[[Ping builder] mergeFromCodedInputStream:input] build];
}
+ (Ping*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Ping*)[[[Ping builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Ping_Builder*) builder {
  return [[[Ping_Builder alloc] init] autorelease];
}
+ (Ping_Builder*) builderWithPrototype:(Ping*) prototype {
  return [[Ping builder] mergeFrom:prototype];
}
- (Ping_Builder*) builder {
  return [Ping builder];
}
@end

@interface Ping_Builder()
@property (retain) Ping* result;
@end

@implementation Ping_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Ping alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Ping_Builder*) clear {
  self.result = [[[Ping alloc] init] autorelease];
  return self;
}
- (Ping_Builder*) clone {
  return [Ping builderWithPrototype:result];
}
- (Ping*) defaultInstance {
  return [Ping defaultInstance];
}
- (Ping*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Ping*) buildPartial {
  Ping* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Ping_Builder*) mergeFrom:(Ping*) other {
  if (other == [Ping defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Ping_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Ping_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (NSString*) id {
  return result.id;
}
- (Ping_Builder*) setId:(NSString*) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (Ping_Builder*) clearId {
  result.hasId = NO;
  result.id = @"";
  return self;
}
@end

@interface AuthenticateRequest ()
@property (retain) NSString* username;
@property (retain) NSString* password;
@property (retain) NSString* resource;
@end

@implementation AuthenticateRequest

- (BOOL) hasUsername {
  return !!hasUsername_;
}
- (void) setHasUsername:(BOOL) value {
  hasUsername_ = !!value;
}
@synthesize username;
- (BOOL) hasPassword {
  return !!hasPassword_;
}
- (void) setHasPassword:(BOOL) value {
  hasPassword_ = !!value;
}
@synthesize password;
- (BOOL) hasResource {
  return !!hasResource_;
}
- (void) setHasResource:(BOOL) value {
  hasResource_ = !!value;
}
@synthesize resource;
- (void) dealloc {
  self.username = nil;
  self.password = nil;
  self.resource = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.username = @"";
    self.password = @"";
    self.resource = @"";
  }
  return self;
}
static AuthenticateRequest* defaultAuthenticateRequestInstance = nil;
+ (void) initialize {
  if (self == [AuthenticateRequest class]) {
    defaultAuthenticateRequestInstance = [[AuthenticateRequest alloc] init];
  }
}
+ (AuthenticateRequest*) defaultInstance {
  return defaultAuthenticateRequestInstance;
}
- (AuthenticateRequest*) defaultInstance {
  return defaultAuthenticateRequestInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUsername) {
    return NO;
  }
  if (!self.hasPassword) {
    return NO;
  }
  if (!self.hasResource) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUsername) {
    [output writeString:1 value:self.username];
  }
  if (self.hasPassword) {
    [output writeString:2 value:self.password];
  }
  if (self.hasResource) {
    [output writeString:3 value:self.resource];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUsername) {
    size += computeStringSize(1, self.username);
  }
  if (self.hasPassword) {
    size += computeStringSize(2, self.password);
  }
  if (self.hasResource) {
    size += computeStringSize(3, self.resource);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (AuthenticateRequest*) parseFromData:(NSData*) data {
  return (AuthenticateRequest*)[[[AuthenticateRequest builder] mergeFromData:data] build];
}
+ (AuthenticateRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AuthenticateRequest*)[[[AuthenticateRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AuthenticateRequest*) parseFromInputStream:(NSInputStream*) input {
  return (AuthenticateRequest*)[[[AuthenticateRequest builder] mergeFromInputStream:input] build];
}
+ (AuthenticateRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AuthenticateRequest*)[[[AuthenticateRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AuthenticateRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AuthenticateRequest*)[[[AuthenticateRequest builder] mergeFromCodedInputStream:input] build];
}
+ (AuthenticateRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AuthenticateRequest*)[[[AuthenticateRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AuthenticateRequest_Builder*) builder {
  return [[[AuthenticateRequest_Builder alloc] init] autorelease];
}
+ (AuthenticateRequest_Builder*) builderWithPrototype:(AuthenticateRequest*) prototype {
  return [[AuthenticateRequest builder] mergeFrom:prototype];
}
- (AuthenticateRequest_Builder*) builder {
  return [AuthenticateRequest builder];
}
@end

@interface AuthenticateRequest_Builder()
@property (retain) AuthenticateRequest* result;
@end

@implementation AuthenticateRequest_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[AuthenticateRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (AuthenticateRequest_Builder*) clear {
  self.result = [[[AuthenticateRequest alloc] init] autorelease];
  return self;
}
- (AuthenticateRequest_Builder*) clone {
  return [AuthenticateRequest builderWithPrototype:result];
}
- (AuthenticateRequest*) defaultInstance {
  return [AuthenticateRequest defaultInstance];
}
- (AuthenticateRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AuthenticateRequest*) buildPartial {
  AuthenticateRequest* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (AuthenticateRequest_Builder*) mergeFrom:(AuthenticateRequest*) other {
  if (other == [AuthenticateRequest defaultInstance]) {
    return self;
  }
  if (other.hasUsername) {
    [self setUsername:other.username];
  }
  if (other.hasPassword) {
    [self setPassword:other.password];
  }
  if (other.hasResource) {
    [self setResource:other.resource];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AuthenticateRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AuthenticateRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUsername:[input readString]];
        break;
      }
      case 18: {
        [self setPassword:[input readString]];
        break;
      }
      case 26: {
        [self setResource:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUsername {
  return result.hasUsername;
}
- (NSString*) username {
  return result.username;
}
- (AuthenticateRequest_Builder*) setUsername:(NSString*) value {
  result.hasUsername = YES;
  result.username = value;
  return self;
}
- (AuthenticateRequest_Builder*) clearUsername {
  result.hasUsername = NO;
  result.username = @"";
  return self;
}
- (BOOL) hasPassword {
  return result.hasPassword;
}
- (NSString*) password {
  return result.password;
}
- (AuthenticateRequest_Builder*) setPassword:(NSString*) value {
  result.hasPassword = YES;
  result.password = value;
  return self;
}
- (AuthenticateRequest_Builder*) clearPassword {
  result.hasPassword = NO;
  result.password = @"";
  return self;
}
- (BOOL) hasResource {
  return result.hasResource;
}
- (NSString*) resource {
  return result.resource;
}
- (AuthenticateRequest_Builder*) setResource:(NSString*) value {
  result.hasResource = YES;
  result.resource = value;
  return self;
}
- (AuthenticateRequest_Builder*) clearResource {
  result.hasResource = NO;
  result.resource = @"";
  return self;
}
@end

@interface AuthenticateResponse ()
@property (retain) NSString* username;
@property (retain) NSString* sessionId;
@property (retain) NSString* errorMessage;
@end

@implementation AuthenticateResponse

- (BOOL) hasUsername {
  return !!hasUsername_;
}
- (void) setHasUsername:(BOOL) value {
  hasUsername_ = !!value;
}
@synthesize username;
- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) value {
  hasSessionId_ = !!value;
}
@synthesize sessionId;
- (BOOL) hasErrorMessage {
  return !!hasErrorMessage_;
}
- (void) setHasErrorMessage:(BOOL) value {
  hasErrorMessage_ = !!value;
}
@synthesize errorMessage;
- (void) dealloc {
  self.username = nil;
  self.sessionId = nil;
  self.errorMessage = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.username = @"";
    self.sessionId = @"";
    self.errorMessage = @"";
  }
  return self;
}
static AuthenticateResponse* defaultAuthenticateResponseInstance = nil;
+ (void) initialize {
  if (self == [AuthenticateResponse class]) {
    defaultAuthenticateResponseInstance = [[AuthenticateResponse alloc] init];
  }
}
+ (AuthenticateResponse*) defaultInstance {
  return defaultAuthenticateResponseInstance;
}
- (AuthenticateResponse*) defaultInstance {
  return defaultAuthenticateResponseInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUsername) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUsername) {
    [output writeString:1 value:self.username];
  }
  if (self.hasSessionId) {
    [output writeString:2 value:self.sessionId];
  }
  if (self.hasErrorMessage) {
    [output writeString:3 value:self.errorMessage];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasUsername) {
    size += computeStringSize(1, self.username);
  }
  if (self.hasSessionId) {
    size += computeStringSize(2, self.sessionId);
  }
  if (self.hasErrorMessage) {
    size += computeStringSize(3, self.errorMessage);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (AuthenticateResponse*) parseFromData:(NSData*) data {
  return (AuthenticateResponse*)[[[AuthenticateResponse builder] mergeFromData:data] build];
}
+ (AuthenticateResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AuthenticateResponse*)[[[AuthenticateResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (AuthenticateResponse*) parseFromInputStream:(NSInputStream*) input {
  return (AuthenticateResponse*)[[[AuthenticateResponse builder] mergeFromInputStream:input] build];
}
+ (AuthenticateResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AuthenticateResponse*)[[[AuthenticateResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AuthenticateResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (AuthenticateResponse*)[[[AuthenticateResponse builder] mergeFromCodedInputStream:input] build];
}
+ (AuthenticateResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (AuthenticateResponse*)[[[AuthenticateResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AuthenticateResponse_Builder*) builder {
  return [[[AuthenticateResponse_Builder alloc] init] autorelease];
}
+ (AuthenticateResponse_Builder*) builderWithPrototype:(AuthenticateResponse*) prototype {
  return [[AuthenticateResponse builder] mergeFrom:prototype];
}
- (AuthenticateResponse_Builder*) builder {
  return [AuthenticateResponse builder];
}
@end

@interface AuthenticateResponse_Builder()
@property (retain) AuthenticateResponse* result;
@end

@implementation AuthenticateResponse_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[AuthenticateResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (AuthenticateResponse_Builder*) clear {
  self.result = [[[AuthenticateResponse alloc] init] autorelease];
  return self;
}
- (AuthenticateResponse_Builder*) clone {
  return [AuthenticateResponse builderWithPrototype:result];
}
- (AuthenticateResponse*) defaultInstance {
  return [AuthenticateResponse defaultInstance];
}
- (AuthenticateResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (AuthenticateResponse*) buildPartial {
  AuthenticateResponse* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (AuthenticateResponse_Builder*) mergeFrom:(AuthenticateResponse*) other {
  if (other == [AuthenticateResponse defaultInstance]) {
    return self;
  }
  if (other.hasUsername) {
    [self setUsername:other.username];
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  if (other.hasErrorMessage) {
    [self setErrorMessage:other.errorMessage];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AuthenticateResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AuthenticateResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUsername:[input readString]];
        break;
      }
      case 18: {
        [self setSessionId:[input readString]];
        break;
      }
      case 26: {
        [self setErrorMessage:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUsername {
  return result.hasUsername;
}
- (NSString*) username {
  return result.username;
}
- (AuthenticateResponse_Builder*) setUsername:(NSString*) value {
  result.hasUsername = YES;
  result.username = value;
  return self;
}
- (AuthenticateResponse_Builder*) clearUsername {
  result.hasUsername = NO;
  result.username = @"";
  return self;
}
- (BOOL) hasSessionId {
  return result.hasSessionId;
}
- (NSString*) sessionId {
  return result.sessionId;
}
- (AuthenticateResponse_Builder*) setSessionId:(NSString*) value {
  result.hasSessionId = YES;
  result.sessionId = value;
  return self;
}
- (AuthenticateResponse_Builder*) clearSessionId {
  result.hasSessionId = NO;
  result.sessionId = @"";
  return self;
}
- (BOOL) hasErrorMessage {
  return result.hasErrorMessage;
}
- (NSString*) errorMessage {
  return result.errorMessage;
}
- (AuthenticateResponse_Builder*) setErrorMessage:(NSString*) value {
  result.hasErrorMessage = YES;
  result.errorMessage = value;
  return self;
}
- (AuthenticateResponse_Builder*) clearErrorMessage {
  result.hasErrorMessage = NO;
  result.errorMessage = @"";
  return self;
}
@end

@interface BindRequest ()
@property (retain) NSString* sessionId;
@end

@implementation BindRequest

- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) value {
  hasSessionId_ = !!value;
}
@synthesize sessionId;
- (void) dealloc {
  self.sessionId = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.sessionId = @"";
  }
  return self;
}
static BindRequest* defaultBindRequestInstance = nil;
+ (void) initialize {
  if (self == [BindRequest class]) {
    defaultBindRequestInstance = [[BindRequest alloc] init];
  }
}
+ (BindRequest*) defaultInstance {
  return defaultBindRequestInstance;
}
- (BindRequest*) defaultInstance {
  return defaultBindRequestInstance;
}
- (BOOL) isInitialized {
  if (!self.hasSessionId) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSessionId) {
    [output writeString:1 value:self.sessionId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasSessionId) {
    size += computeStringSize(1, self.sessionId);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (BindRequest*) parseFromData:(NSData*) data {
  return (BindRequest*)[[[BindRequest builder] mergeFromData:data] build];
}
+ (BindRequest*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BindRequest*)[[[BindRequest builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BindRequest*) parseFromInputStream:(NSInputStream*) input {
  return (BindRequest*)[[[BindRequest builder] mergeFromInputStream:input] build];
}
+ (BindRequest*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BindRequest*)[[[BindRequest builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BindRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BindRequest*)[[[BindRequest builder] mergeFromCodedInputStream:input] build];
}
+ (BindRequest*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BindRequest*)[[[BindRequest builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BindRequest_Builder*) builder {
  return [[[BindRequest_Builder alloc] init] autorelease];
}
+ (BindRequest_Builder*) builderWithPrototype:(BindRequest*) prototype {
  return [[BindRequest builder] mergeFrom:prototype];
}
- (BindRequest_Builder*) builder {
  return [BindRequest builder];
}
@end

@interface BindRequest_Builder()
@property (retain) BindRequest* result;
@end

@implementation BindRequest_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[BindRequest alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (BindRequest_Builder*) clear {
  self.result = [[[BindRequest alloc] init] autorelease];
  return self;
}
- (BindRequest_Builder*) clone {
  return [BindRequest builderWithPrototype:result];
}
- (BindRequest*) defaultInstance {
  return [BindRequest defaultInstance];
}
- (BindRequest*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BindRequest*) buildPartial {
  BindRequest* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (BindRequest_Builder*) mergeFrom:(BindRequest*) other {
  if (other == [BindRequest defaultInstance]) {
    return self;
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BindRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BindRequest_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setSessionId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasSessionId {
  return result.hasSessionId;
}
- (NSString*) sessionId {
  return result.sessionId;
}
- (BindRequest_Builder*) setSessionId:(NSString*) value {
  result.hasSessionId = YES;
  result.sessionId = value;
  return self;
}
- (BindRequest_Builder*) clearSessionId {
  result.hasSessionId = NO;
  result.sessionId = @"";
  return self;
}
@end

@interface BindResponse ()
@property (retain) NSString* sessionId;
@end

@implementation BindResponse

- (BOOL) hasSessionId {
  return !!hasSessionId_;
}
- (void) setHasSessionId:(BOOL) value {
  hasSessionId_ = !!value;
}
@synthesize sessionId;
- (void) dealloc {
  self.sessionId = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.sessionId = @"";
  }
  return self;
}
static BindResponse* defaultBindResponseInstance = nil;
+ (void) initialize {
  if (self == [BindResponse class]) {
    defaultBindResponseInstance = [[BindResponse alloc] init];
  }
}
+ (BindResponse*) defaultInstance {
  return defaultBindResponseInstance;
}
- (BindResponse*) defaultInstance {
  return defaultBindResponseInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasSessionId) {
    [output writeString:1 value:self.sessionId];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasSessionId) {
    size += computeStringSize(1, self.sessionId);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (BindResponse*) parseFromData:(NSData*) data {
  return (BindResponse*)[[[BindResponse builder] mergeFromData:data] build];
}
+ (BindResponse*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BindResponse*)[[[BindResponse builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BindResponse*) parseFromInputStream:(NSInputStream*) input {
  return (BindResponse*)[[[BindResponse builder] mergeFromInputStream:input] build];
}
+ (BindResponse*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BindResponse*)[[[BindResponse builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BindResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BindResponse*)[[[BindResponse builder] mergeFromCodedInputStream:input] build];
}
+ (BindResponse*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BindResponse*)[[[BindResponse builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BindResponse_Builder*) builder {
  return [[[BindResponse_Builder alloc] init] autorelease];
}
+ (BindResponse_Builder*) builderWithPrototype:(BindResponse*) prototype {
  return [[BindResponse builder] mergeFrom:prototype];
}
- (BindResponse_Builder*) builder {
  return [BindResponse builder];
}
@end

@interface BindResponse_Builder()
@property (retain) BindResponse* result;
@end

@implementation BindResponse_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[BindResponse alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (BindResponse_Builder*) clear {
  self.result = [[[BindResponse alloc] init] autorelease];
  return self;
}
- (BindResponse_Builder*) clone {
  return [BindResponse builderWithPrototype:result];
}
- (BindResponse*) defaultInstance {
  return [BindResponse defaultInstance];
}
- (BindResponse*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BindResponse*) buildPartial {
  BindResponse* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (BindResponse_Builder*) mergeFrom:(BindResponse*) other {
  if (other == [BindResponse defaultInstance]) {
    return self;
  }
  if (other.hasSessionId) {
    [self setSessionId:other.sessionId];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BindResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BindResponse_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setSessionId:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasSessionId {
  return result.hasSessionId;
}
- (NSString*) sessionId {
  return result.sessionId;
}
- (BindResponse_Builder*) setSessionId:(NSString*) value {
  result.hasSessionId = YES;
  result.sessionId = value;
  return self;
}
- (BindResponse_Builder*) clearSessionId {
  result.hasSessionId = NO;
  result.sessionId = @"";
  return self;
}
@end

@interface Roster ()
@property (retain) NSMutableArray* mutableItemList;
@end

@implementation Roster

@synthesize mutableItemList;
- (void) dealloc {
  self.mutableItemList = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
  }
  return self;
}
static Roster* defaultRosterInstance = nil;
+ (void) initialize {
  if (self == [Roster class]) {
    defaultRosterInstance = [[Roster alloc] init];
  }
}
+ (Roster*) defaultInstance {
  return defaultRosterInstance;
}
- (Roster*) defaultInstance {
  return defaultRosterInstance;
}
- (NSArray*) itemList {
  return mutableItemList;
}
- (RosterItem*) itemAtIndex:(int32_t) index {
  id value = [mutableItemList objectAtIndex:index];
  return value;
}
- (BOOL) isInitialized {
  for (RosterItem* element in self.itemList) {
    if (!element.isInitialized) {
      return NO;
    }
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  for (RosterItem* element in self.itemList) {
    [output writeMessage:1 value:element];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  for (RosterItem* element in self.itemList) {
    size += computeMessageSize(1, element);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Roster*) parseFromData:(NSData*) data {
  return (Roster*)[[[Roster builder] mergeFromData:data] build];
}
+ (Roster*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Roster*)[[[Roster builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Roster*) parseFromInputStream:(NSInputStream*) input {
  return (Roster*)[[[Roster builder] mergeFromInputStream:input] build];
}
+ (Roster*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Roster*)[[[Roster builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Roster*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Roster*)[[[Roster builder] mergeFromCodedInputStream:input] build];
}
+ (Roster*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Roster*)[[[Roster builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Roster_Builder*) builder {
  return [[[Roster_Builder alloc] init] autorelease];
}
+ (Roster_Builder*) builderWithPrototype:(Roster*) prototype {
  return [[Roster builder] mergeFrom:prototype];
}
- (Roster_Builder*) builder {
  return [Roster builder];
}
@end

@interface Roster_Builder()
@property (retain) Roster* result;
@end

@implementation Roster_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Roster alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Roster_Builder*) clear {
  self.result = [[[Roster alloc] init] autorelease];
  return self;
}
- (Roster_Builder*) clone {
  return [Roster builderWithPrototype:result];
}
- (Roster*) defaultInstance {
  return [Roster defaultInstance];
}
- (Roster*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Roster*) buildPartial {
  Roster* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Roster_Builder*) mergeFrom:(Roster*) other {
  if (other == [Roster defaultInstance]) {
    return self;
  }
  if (other.mutableItemList.count > 0) {
    if (result.mutableItemList == nil) {
      result.mutableItemList = [NSMutableArray array];
    }
    [result.mutableItemList addObjectsFromArray:other.mutableItemList];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Roster_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Roster_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        RosterItem_Builder* subBuilder = [RosterItem builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addItem:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (NSArray*) itemList {
  if (result.mutableItemList == nil) { return [NSArray array]; }
  return result.mutableItemList;
}
- (RosterItem*) itemAtIndex:(int32_t) index {
  return [result itemAtIndex:index];
}
- (Roster_Builder*) replaceItemAtIndex:(int32_t) index with:(RosterItem*) value {
  [result.mutableItemList replaceObjectAtIndex:index withObject:value];
  return self;
}
- (Roster_Builder*) addAllItem:(NSArray*) values {
  if (result.mutableItemList == nil) {
    result.mutableItemList = [NSMutableArray array];
  }
  [result.mutableItemList addObjectsFromArray:values];
  return self;
}
- (Roster_Builder*) clearItemList {
  result.mutableItemList = nil;
  return self;
}
- (Roster_Builder*) addItem:(RosterItem*) value {
  if (result.mutableItemList == nil) {
    result.mutableItemList = [NSMutableArray array];
  }
  [result.mutableItemList addObject:value];
  return self;
}
@end

@interface RosterItem ()
@property (retain) NSString* name;
@property (retain) NSString* jid;
@property (retain) NSString* subscription;
@property (retain) NSString* itemGroup;
@end

@implementation RosterItem

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) value {
  hasName_ = !!value;
}
@synthesize name;
- (BOOL) hasJid {
  return !!hasJid_;
}
- (void) setHasJid:(BOOL) value {
  hasJid_ = !!value;
}
@synthesize jid;
- (BOOL) hasSubscription {
  return !!hasSubscription_;
}
- (void) setHasSubscription:(BOOL) value {
  hasSubscription_ = !!value;
}
@synthesize subscription;
- (BOOL) hasItemGroup {
  return !!hasItemGroup_;
}
- (void) setHasItemGroup:(BOOL) value {
  hasItemGroup_ = !!value;
}
@synthesize itemGroup;
- (void) dealloc {
  self.name = nil;
  self.jid = nil;
  self.subscription = nil;
  self.itemGroup = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.name = @"";
    self.jid = @"";
    self.subscription = @"";
    self.itemGroup = @"";
  }
  return self;
}
static RosterItem* defaultRosterItemInstance = nil;
+ (void) initialize {
  if (self == [RosterItem class]) {
    defaultRosterItemInstance = [[RosterItem alloc] init];
  }
}
+ (RosterItem*) defaultInstance {
  return defaultRosterItemInstance;
}
- (RosterItem*) defaultInstance {
  return defaultRosterItemInstance;
}
- (BOOL) isInitialized {
  if (!self.hasName) {
    return NO;
  }
  if (!self.hasJid) {
    return NO;
  }
  if (!self.hasSubscription) {
    return NO;
  }
  if (!self.hasItemGroup) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasJid) {
    [output writeString:2 value:self.jid];
  }
  if (self.hasSubscription) {
    [output writeString:3 value:self.subscription];
  }
  if (self.hasItemGroup) {
    [output writeString:4 value:self.itemGroup];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasName) {
    size += computeStringSize(1, self.name);
  }
  if (self.hasJid) {
    size += computeStringSize(2, self.jid);
  }
  if (self.hasSubscription) {
    size += computeStringSize(3, self.subscription);
  }
  if (self.hasItemGroup) {
    size += computeStringSize(4, self.itemGroup);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (RosterItem*) parseFromData:(NSData*) data {
  return (RosterItem*)[[[RosterItem builder] mergeFromData:data] build];
}
+ (RosterItem*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RosterItem*)[[[RosterItem builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (RosterItem*) parseFromInputStream:(NSInputStream*) input {
  return (RosterItem*)[[[RosterItem builder] mergeFromInputStream:input] build];
}
+ (RosterItem*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RosterItem*)[[[RosterItem builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RosterItem*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (RosterItem*)[[[RosterItem builder] mergeFromCodedInputStream:input] build];
}
+ (RosterItem*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (RosterItem*)[[[RosterItem builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (RosterItem_Builder*) builder {
  return [[[RosterItem_Builder alloc] init] autorelease];
}
+ (RosterItem_Builder*) builderWithPrototype:(RosterItem*) prototype {
  return [[RosterItem builder] mergeFrom:prototype];
}
- (RosterItem_Builder*) builder {
  return [RosterItem builder];
}
@end

@interface RosterItem_Builder()
@property (retain) RosterItem* result;
@end

@implementation RosterItem_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[RosterItem alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (RosterItem_Builder*) clear {
  self.result = [[[RosterItem alloc] init] autorelease];
  return self;
}
- (RosterItem_Builder*) clone {
  return [RosterItem builderWithPrototype:result];
}
- (RosterItem*) defaultInstance {
  return [RosterItem defaultInstance];
}
- (RosterItem*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (RosterItem*) buildPartial {
  RosterItem* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (RosterItem_Builder*) mergeFrom:(RosterItem*) other {
  if (other == [RosterItem defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasJid) {
    [self setJid:other.jid];
  }
  if (other.hasSubscription) {
    [self setSubscription:other.subscription];
  }
  if (other.hasItemGroup) {
    [self setItemGroup:other.itemGroup];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (RosterItem_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (RosterItem_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 18: {
        [self setJid:[input readString]];
        break;
      }
      case 26: {
        [self setSubscription:[input readString]];
        break;
      }
      case 34: {
        [self setItemGroup:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return result.hasName;
}
- (NSString*) name {
  return result.name;
}
- (RosterItem_Builder*) setName:(NSString*) value {
  result.hasName = YES;
  result.name = value;
  return self;
}
- (RosterItem_Builder*) clearName {
  result.hasName = NO;
  result.name = @"";
  return self;
}
- (BOOL) hasJid {
  return result.hasJid;
}
- (NSString*) jid {
  return result.jid;
}
- (RosterItem_Builder*) setJid:(NSString*) value {
  result.hasJid = YES;
  result.jid = value;
  return self;
}
- (RosterItem_Builder*) clearJid {
  result.hasJid = NO;
  result.jid = @"";
  return self;
}
- (BOOL) hasSubscription {
  return result.hasSubscription;
}
- (NSString*) subscription {
  return result.subscription;
}
- (RosterItem_Builder*) setSubscription:(NSString*) value {
  result.hasSubscription = YES;
  result.subscription = value;
  return self;
}
- (RosterItem_Builder*) clearSubscription {
  result.hasSubscription = NO;
  result.subscription = @"";
  return self;
}
- (BOOL) hasItemGroup {
  return result.hasItemGroup;
}
- (NSString*) itemGroup {
  return result.itemGroup;
}
- (RosterItem_Builder*) setItemGroup:(NSString*) value {
  result.hasItemGroup = YES;
  result.itemGroup = value;
  return self;
}
- (RosterItem_Builder*) clearItemGroup {
  result.hasItemGroup = NO;
  result.itemGroup = @"";
  return self;
}
@end

@interface Presence ()
@property (retain) NSString* from;
@property (retain) NSString* type;
@property (retain) NSString* show;
@property (retain) NSString* status;
@end

@implementation Presence

- (BOOL) hasFrom {
  return !!hasFrom_;
}
- (void) setHasFrom:(BOOL) value {
  hasFrom_ = !!value;
}
@synthesize from;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value {
  hasType_ = !!value;
}
@synthesize type;
- (BOOL) hasShow {
  return !!hasShow_;
}
- (void) setHasShow:(BOOL) value {
  hasShow_ = !!value;
}
@synthesize show;
- (BOOL) hasStatus {
  return !!hasStatus_;
}
- (void) setHasStatus:(BOOL) value {
  hasStatus_ = !!value;
}
@synthesize status;
- (void) dealloc {
  self.from = nil;
  self.type = nil;
  self.show = nil;
  self.status = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.from = @"";
    self.type = @"";
    self.show = @"";
    self.status = @"";
  }
  return self;
}
static Presence* defaultPresenceInstance = nil;
+ (void) initialize {
  if (self == [Presence class]) {
    defaultPresenceInstance = [[Presence alloc] init];
  }
}
+ (Presence*) defaultInstance {
  return defaultPresenceInstance;
}
- (Presence*) defaultInstance {
  return defaultPresenceInstance;
}
- (BOOL) isInitialized {
  if (!self.hasFrom) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasFrom) {
    [output writeString:1 value:self.from];
  }
  if (self.hasType) {
    [output writeString:2 value:self.type];
  }
  if (self.hasShow) {
    [output writeString:3 value:self.show];
  }
  if (self.hasStatus) {
    [output writeString:4 value:self.status];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasFrom) {
    size += computeStringSize(1, self.from);
  }
  if (self.hasType) {
    size += computeStringSize(2, self.type);
  }
  if (self.hasShow) {
    size += computeStringSize(3, self.show);
  }
  if (self.hasStatus) {
    size += computeStringSize(4, self.status);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (Presence*) parseFromData:(NSData*) data {
  return (Presence*)[[[Presence builder] mergeFromData:data] build];
}
+ (Presence*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Presence*)[[[Presence builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Presence*) parseFromInputStream:(NSInputStream*) input {
  return (Presence*)[[[Presence builder] mergeFromInputStream:input] build];
}
+ (Presence*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Presence*)[[[Presence builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Presence*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Presence*)[[[Presence builder] mergeFromCodedInputStream:input] build];
}
+ (Presence*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Presence*)[[[Presence builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Presence_Builder*) builder {
  return [[[Presence_Builder alloc] init] autorelease];
}
+ (Presence_Builder*) builderWithPrototype:(Presence*) prototype {
  return [[Presence builder] mergeFrom:prototype];
}
- (Presence_Builder*) builder {
  return [Presence builder];
}
@end

@interface Presence_Builder()
@property (retain) Presence* result;
@end

@implementation Presence_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[Presence alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (Presence_Builder*) clear {
  self.result = [[[Presence alloc] init] autorelease];
  return self;
}
- (Presence_Builder*) clone {
  return [Presence builderWithPrototype:result];
}
- (Presence*) defaultInstance {
  return [Presence defaultInstance];
}
- (Presence*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Presence*) buildPartial {
  Presence* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (Presence_Builder*) mergeFrom:(Presence*) other {
  if (other == [Presence defaultInstance]) {
    return self;
  }
  if (other.hasFrom) {
    [self setFrom:other.from];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasShow) {
    [self setShow:other.show];
  }
  if (other.hasStatus) {
    [self setStatus:other.status];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (Presence_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (Presence_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setFrom:[input readString]];
        break;
      }
      case 18: {
        [self setType:[input readString]];
        break;
      }
      case 26: {
        [self setShow:[input readString]];
        break;
      }
      case 34: {
        [self setStatus:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasFrom {
  return result.hasFrom;
}
- (NSString*) from {
  return result.from;
}
- (Presence_Builder*) setFrom:(NSString*) value {
  result.hasFrom = YES;
  result.from = value;
  return self;
}
- (Presence_Builder*) clearFrom {
  result.hasFrom = NO;
  result.from = @"";
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (NSString*) type {
  return result.type;
}
- (Presence_Builder*) setType:(NSString*) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (Presence_Builder*) clearType {
  result.hasType = NO;
  result.type = @"";
  return self;
}
- (BOOL) hasShow {
  return result.hasShow;
}
- (NSString*) show {
  return result.show;
}
- (Presence_Builder*) setShow:(NSString*) value {
  result.hasShow = YES;
  result.show = value;
  return self;
}
- (Presence_Builder*) clearShow {
  result.hasShow = NO;
  result.show = @"";
  return self;
}
- (BOOL) hasStatus {
  return result.hasStatus;
}
- (NSString*) status {
  return result.status;
}
- (Presence_Builder*) setStatus:(NSString*) value {
  result.hasStatus = YES;
  result.status = value;
  return self;
}
- (Presence_Builder*) clearStatus {
  result.hasStatus = NO;
  result.status = @"";
  return self;
}
@end

@interface TextMessage ()
@property (retain) NSString* id;
@property (retain) NSString* toUser;
@property (retain) NSString* fromUser;
@property (retain) NSString* type;
@property (retain) NSString* subject;
@property (retain) NSString* body;
@property (retain) NSString* thread;
@property BOOL active;
@property BOOL composing;
@property BOOL paused;
@property BOOL inactive;
@property BOOL gone;
@end

@implementation TextMessage

- (BOOL) hasId {
  return !!hasId_;
}
- (void) setHasId:(BOOL) value {
  hasId_ = !!value;
}
@synthesize id;
- (BOOL) hasToUser {
  return !!hasToUser_;
}
- (void) setHasToUser:(BOOL) value {
  hasToUser_ = !!value;
}
@synthesize toUser;
- (BOOL) hasFromUser {
  return !!hasFromUser_;
}
- (void) setHasFromUser:(BOOL) value {
  hasFromUser_ = !!value;
}
@synthesize fromUser;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) value {
  hasType_ = !!value;
}
@synthesize type;
- (BOOL) hasSubject {
  return !!hasSubject_;
}
- (void) setHasSubject:(BOOL) value {
  hasSubject_ = !!value;
}
@synthesize subject;
- (BOOL) hasBody {
  return !!hasBody_;
}
- (void) setHasBody:(BOOL) value {
  hasBody_ = !!value;
}
@synthesize body;
- (BOOL) hasThread {
  return !!hasThread_;
}
- (void) setHasThread:(BOOL) value {
  hasThread_ = !!value;
}
@synthesize thread;
- (BOOL) hasActive {
  return !!hasActive_;
}
- (void) setHasActive:(BOOL) value {
  hasActive_ = !!value;
}
- (BOOL) active {
  return !!active_;
}
- (void) setActive:(BOOL) value {
  active_ = !!value;
}
- (BOOL) hasComposing {
  return !!hasComposing_;
}
- (void) setHasComposing:(BOOL) value {
  hasComposing_ = !!value;
}
- (BOOL) composing {
  return !!composing_;
}
- (void) setComposing:(BOOL) value {
  composing_ = !!value;
}
- (BOOL) hasPaused {
  return !!hasPaused_;
}
- (void) setHasPaused:(BOOL) value {
  hasPaused_ = !!value;
}
- (BOOL) paused {
  return !!paused_;
}
- (void) setPaused:(BOOL) value {
  paused_ = !!value;
}
- (BOOL) hasInactive {
  return !!hasInactive_;
}
- (void) setHasInactive:(BOOL) value {
  hasInactive_ = !!value;
}
- (BOOL) inactive {
  return !!inactive_;
}
- (void) setInactive:(BOOL) value {
  inactive_ = !!value;
}
- (BOOL) hasGone {
  return !!hasGone_;
}
- (void) setHasGone:(BOOL) value {
  hasGone_ = !!value;
}
- (BOOL) gone {
  return !!gone_;
}
- (void) setGone:(BOOL) value {
  gone_ = !!value;
}
- (void) dealloc {
  self.id = nil;
  self.toUser = nil;
  self.fromUser = nil;
  self.type = nil;
  self.subject = nil;
  self.body = nil;
  self.thread = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.id = @"";
    self.toUser = @"";
    self.fromUser = @"";
    self.type = @"";
    self.subject = @"";
    self.body = @"";
    self.thread = @"";
    self.active = NO;
    self.composing = NO;
    self.paused = NO;
    self.inactive = NO;
    self.gone = NO;
  }
  return self;
}
static TextMessage* defaultTextMessageInstance = nil;
+ (void) initialize {
  if (self == [TextMessage class]) {
    defaultTextMessageInstance = [[TextMessage alloc] init];
  }
}
+ (TextMessage*) defaultInstance {
  return defaultTextMessageInstance;
}
- (TextMessage*) defaultInstance {
  return defaultTextMessageInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasId) {
    [output writeString:1 value:self.id];
  }
  if (self.hasToUser) {
    [output writeString:2 value:self.toUser];
  }
  if (self.hasFromUser) {
    [output writeString:3 value:self.fromUser];
  }
  if (self.hasType) {
    [output writeString:4 value:self.type];
  }
  if (self.hasSubject) {
    [output writeString:5 value:self.subject];
  }
  if (self.hasBody) {
    [output writeString:6 value:self.body];
  }
  if (self.hasThread) {
    [output writeString:7 value:self.thread];
  }
  if (self.hasActive) {
    [output writeBool:8 value:self.active];
  }
  if (self.hasComposing) {
    [output writeBool:9 value:self.composing];
  }
  if (self.hasPaused) {
    [output writeBool:10 value:self.paused];
  }
  if (self.hasInactive) {
    [output writeBool:11 value:self.inactive];
  }
  if (self.hasGone) {
    [output writeBool:12 value:self.gone];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (int32_t) serializedSize {
  int32_t size = memoizedSerializedSize;
  if (size != -1) {
    return size;
  }

  size = 0;
  if (self.hasId) {
    size += computeStringSize(1, self.id);
  }
  if (self.hasToUser) {
    size += computeStringSize(2, self.toUser);
  }
  if (self.hasFromUser) {
    size += computeStringSize(3, self.fromUser);
  }
  if (self.hasType) {
    size += computeStringSize(4, self.type);
  }
  if (self.hasSubject) {
    size += computeStringSize(5, self.subject);
  }
  if (self.hasBody) {
    size += computeStringSize(6, self.body);
  }
  if (self.hasThread) {
    size += computeStringSize(7, self.thread);
  }
  if (self.hasActive) {
    size += computeBoolSize(8, self.active);
  }
  if (self.hasComposing) {
    size += computeBoolSize(9, self.composing);
  }
  if (self.hasPaused) {
    size += computeBoolSize(10, self.paused);
  }
  if (self.hasInactive) {
    size += computeBoolSize(11, self.inactive);
  }
  if (self.hasGone) {
    size += computeBoolSize(12, self.gone);
  }
  size += self.unknownFields.serializedSize;
  memoizedSerializedSize = size;
  return size;
}
+ (TextMessage*) parseFromData:(NSData*) data {
  return (TextMessage*)[[[TextMessage builder] mergeFromData:data] build];
}
+ (TextMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TextMessage*)[[[TextMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TextMessage*) parseFromInputStream:(NSInputStream*) input {
  return (TextMessage*)[[[TextMessage builder] mergeFromInputStream:input] build];
}
+ (TextMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TextMessage*)[[[TextMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TextMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TextMessage*)[[[TextMessage builder] mergeFromCodedInputStream:input] build];
}
+ (TextMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TextMessage*)[[[TextMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TextMessage_Builder*) builder {
  return [[[TextMessage_Builder alloc] init] autorelease];
}
+ (TextMessage_Builder*) builderWithPrototype:(TextMessage*) prototype {
  return [[TextMessage builder] mergeFrom:prototype];
}
- (TextMessage_Builder*) builder {
  return [TextMessage builder];
}
@end

@interface TextMessage_Builder()
@property (retain) TextMessage* result;
@end

@implementation TextMessage_Builder
@synthesize result;
- (void) dealloc {
  self.result = nil;
  [super dealloc];
}
- (id) init {
  if ((self = [super init])) {
    self.result = [[[TextMessage alloc] init] autorelease];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return result;
}
- (TextMessage_Builder*) clear {
  self.result = [[[TextMessage alloc] init] autorelease];
  return self;
}
- (TextMessage_Builder*) clone {
  return [TextMessage builderWithPrototype:result];
}
- (TextMessage*) defaultInstance {
  return [TextMessage defaultInstance];
}
- (TextMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TextMessage*) buildPartial {
  TextMessage* returnMe = [[result retain] autorelease];
  self.result = nil;
  return returnMe;
}
- (TextMessage_Builder*) mergeFrom:(TextMessage*) other {
  if (other == [TextMessage defaultInstance]) {
    return self;
  }
  if (other.hasId) {
    [self setId:other.id];
  }
  if (other.hasToUser) {
    [self setToUser:other.toUser];
  }
  if (other.hasFromUser) {
    [self setFromUser:other.fromUser];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasSubject) {
    [self setSubject:other.subject];
  }
  if (other.hasBody) {
    [self setBody:other.body];
  }
  if (other.hasThread) {
    [self setThread:other.thread];
  }
  if (other.hasActive) {
    [self setActive:other.active];
  }
  if (other.hasComposing) {
    [self setComposing:other.composing];
  }
  if (other.hasPaused) {
    [self setPaused:other.paused];
  }
  if (other.hasInactive) {
    [self setInactive:other.inactive];
  }
  if (other.hasGone) {
    [self setGone:other.gone];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TextMessage_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TextMessage_Builder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSet_Builder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    int32_t tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setId:[input readString]];
        break;
      }
      case 18: {
        [self setToUser:[input readString]];
        break;
      }
      case 26: {
        [self setFromUser:[input readString]];
        break;
      }
      case 34: {
        [self setType:[input readString]];
        break;
      }
      case 42: {
        [self setSubject:[input readString]];
        break;
      }
      case 50: {
        [self setBody:[input readString]];
        break;
      }
      case 58: {
        [self setThread:[input readString]];
        break;
      }
      case 64: {
        [self setActive:[input readBool]];
        break;
      }
      case 72: {
        [self setComposing:[input readBool]];
        break;
      }
      case 80: {
        [self setPaused:[input readBool]];
        break;
      }
      case 88: {
        [self setInactive:[input readBool]];
        break;
      }
      case 96: {
        [self setGone:[input readBool]];
        break;
      }
    }
  }
}
- (BOOL) hasId {
  return result.hasId;
}
- (NSString*) id {
  return result.id;
}
- (TextMessage_Builder*) setId:(NSString*) value {
  result.hasId = YES;
  result.id = value;
  return self;
}
- (TextMessage_Builder*) clearId {
  result.hasId = NO;
  result.id = @"";
  return self;
}
- (BOOL) hasToUser {
  return result.hasToUser;
}
- (NSString*) toUser {
  return result.toUser;
}
- (TextMessage_Builder*) setToUser:(NSString*) value {
  result.hasToUser = YES;
  result.toUser = value;
  return self;
}
- (TextMessage_Builder*) clearToUser {
  result.hasToUser = NO;
  result.toUser = @"";
  return self;
}
- (BOOL) hasFromUser {
  return result.hasFromUser;
}
- (NSString*) fromUser {
  return result.fromUser;
}
- (TextMessage_Builder*) setFromUser:(NSString*) value {
  result.hasFromUser = YES;
  result.fromUser = value;
  return self;
}
- (TextMessage_Builder*) clearFromUser {
  result.hasFromUser = NO;
  result.fromUser = @"";
  return self;
}
- (BOOL) hasType {
  return result.hasType;
}
- (NSString*) type {
  return result.type;
}
- (TextMessage_Builder*) setType:(NSString*) value {
  result.hasType = YES;
  result.type = value;
  return self;
}
- (TextMessage_Builder*) clearType {
  result.hasType = NO;
  result.type = @"";
  return self;
}
- (BOOL) hasSubject {
  return result.hasSubject;
}
- (NSString*) subject {
  return result.subject;
}
- (TextMessage_Builder*) setSubject:(NSString*) value {
  result.hasSubject = YES;
  result.subject = value;
  return self;
}
- (TextMessage_Builder*) clearSubject {
  result.hasSubject = NO;
  result.subject = @"";
  return self;
}
- (BOOL) hasBody {
  return result.hasBody;
}
- (NSString*) body {
  return result.body;
}
- (TextMessage_Builder*) setBody:(NSString*) value {
  result.hasBody = YES;
  result.body = value;
  return self;
}
- (TextMessage_Builder*) clearBody {
  result.hasBody = NO;
  result.body = @"";
  return self;
}
- (BOOL) hasThread {
  return result.hasThread;
}
- (NSString*) thread {
  return result.thread;
}
- (TextMessage_Builder*) setThread:(NSString*) value {
  result.hasThread = YES;
  result.thread = value;
  return self;
}
- (TextMessage_Builder*) clearThread {
  result.hasThread = NO;
  result.thread = @"";
  return self;
}
- (BOOL) hasActive {
  return result.hasActive;
}
- (BOOL) active {
  return result.active;
}
- (TextMessage_Builder*) setActive:(BOOL) value {
  result.hasActive = YES;
  result.active = value;
  return self;
}
- (TextMessage_Builder*) clearActive {
  result.hasActive = NO;
  result.active = NO;
  return self;
}
- (BOOL) hasComposing {
  return result.hasComposing;
}
- (BOOL) composing {
  return result.composing;
}
- (TextMessage_Builder*) setComposing:(BOOL) value {
  result.hasComposing = YES;
  result.composing = value;
  return self;
}
- (TextMessage_Builder*) clearComposing {
  result.hasComposing = NO;
  result.composing = NO;
  return self;
}
- (BOOL) hasPaused {
  return result.hasPaused;
}
- (BOOL) paused {
  return result.paused;
}
- (TextMessage_Builder*) setPaused:(BOOL) value {
  result.hasPaused = YES;
  result.paused = value;
  return self;
}
- (TextMessage_Builder*) clearPaused {
  result.hasPaused = NO;
  result.paused = NO;
  return self;
}
- (BOOL) hasInactive {
  return result.hasInactive;
}
- (BOOL) inactive {
  return result.inactive;
}
- (TextMessage_Builder*) setInactive:(BOOL) value {
  result.hasInactive = YES;
  result.inactive = value;
  return self;
}
- (TextMessage_Builder*) clearInactive {
  result.hasInactive = NO;
  result.inactive = NO;
  return self;
}
- (BOOL) hasGone {
  return result.hasGone;
}
- (BOOL) gone {
  return result.gone;
}
- (TextMessage_Builder*) setGone:(BOOL) value {
  result.hasGone = YES;
  result.gone = value;
  return self;
}
- (TextMessage_Builder*) clearGone {
  result.hasGone = NO;
  result.gone = NO;
  return self;
}
@end

